트리

-트리는 데이터의 상하관계(계층적 관계)를 저장하는 자료구조다.(추상자료형이라고 해야 맞지않나?) 컴퓨터 폴더구조나 회사의 직급체계, 클래스 상속관계 등이 전부 계층적 관계가 있는 데이터다. 앞서 배운 배열이나 연결리스트 등은 선형적 자료구조이기 때문에 이런 관계를 반영할 수 없다. 해시테이블도 마찬가지로 계층적 관계를 담지는 못함. 트리는 이런 데이터를 담을 수 있는 자료구조다 이번 시간에는 트리를 알아보자~~

-트리도 연결리스트처럼 노드들로 구성되어있다. 연결리스트가 다음 노드를 가리키는 레퍼런스를 갖는 반면, 트리의 노드들은 하위 관계를 갖는 노드들을 가리키는 레퍼런스를 가진다. b노드와 c노드를 a노드의 자식노드(하위노드)로 설정하고 싶을 때, a노드에 b와 c를 가리키는 레퍼런스를 저장해주면 된다. a는 b와 c의 부모노드라고 할 수 있다. 연결리스트에서는 앞과 뒤가 있는반면 트리는 위와 아래가 있는 것이다. 연결리스트에서 맨 앞 노드를 head라고 설정하고 특별하게 관리하는 것처럼 트리의 가---장 위에 있는 노드를 root 노드라고 한다. 이 노드에서부터 모든게 뻗어나가는 모양새라서 루트라고 하는듯. 이 노드에서 시작하면 트리 안의 모든 데이터에 접근할 수 있다. 

-부모노드는 해당 노드의 직속 상위 노드만 부모노드라고 한다. 이 노드 위의 것들이 전부 부모노드가 되는게 아님 마찬가지로 자식노드 또한 이 노드 밑에 쩌기 어딘가 있는 것들까지 포함하는게 아니라 직속 하위노드만 자식노드라고 한다. 같은 부모노드을 가지는 노드들을 형제노드라고 한다. 왤케 귀엽게 불러ㅋ.ㅋ 그리고 leaf 노드는 root 노드와 반대되는 개념인데 더이상의 하위 노드가 없는 말단에 있는 노드다. 리프노드라고 해서 전부 같은 위계에 존재하는게 아니며 어느 브랜치는 일찍 끝나버리고 어디 한군데는 계속 뻗어나갈 수 있으니 leaf 노드의 깊이는 다를 수 있다. 

-깊이는 이 노드가 루트노드에서 떨어져 있는 거리를 말한다. 루트노드에서 몇번을 내려와야 이 노드에 도달하냐- 는 거지 루트노드의 자식 노드의 깊이는 1이 되는 식. 비슷하게 레벨이라는 개념도 있는데 깊이에 1을 더해주면 된다. 루트 노드는 레벨1에 있는거고 그 밑으로 레벨이 하나씩 늘어간다. 음.. 깊이는 이 노드가 루트 노드로부터 얼마나 멀리 떨어져 있는지 나타낼 때 쓴다고 하면, 레벨은 특정 깊이에 있는 노드들을 묶어서 표현할 때 사용한다. 레벨 3에 위치한 노드들- 요런식으로. 마지막으로 높이! 높이는 가장 깊이 있는 노드의 깊이이다. 즉 이 트리가 얼마나 깊은지 알 수 있는 지표가 된다. 
깊이, 레벨, 높이를 잘 구분해주자

-마지막으로 부분 트리가 있다 트리의 일부만 확대해서 본다면 걔네가 다시 트리구조를 가지고 있는 걸 볼 수 있다. 이렇게 트리 안에서 발견할 수 있는 부속 트리들을 부분 트리라고 하며 아까 a가 b와 c로 이어지는 트리에서는 c가 루트노드가 되는 트리가 a의 오른쪽 부분 트리인거라고 말할 수 있다. 

-트리는 다양한 추상 자료형을 구현하는데에 사용할 수 있다. 딕셔너리, 세트, 우선순위 큐등. 우와 이걸로 어떻게 딕셔너리를 짜지 왕신기


이진 트리
- 각 노드가 최대 2개의 자식 노드만 가질 수 트리 형식을 이진 트리라고 한다. 그래서 자식노드를 왼쪽자식(...) 오른쪽자식(...;_;)이라고 나눠서 부를 수 있다. 트리 중 가장 깔끔하고 심플, 개념과 구현이 가장 간단한 편이다. 

-이진트리도 또 그 종류가 나뉜다. 어렵게 생각할 필요는 없고 형태에 따라 부르는 이름들이 있다고 생각하면 된다. 우선 full binary tree(정 이진트리)는 모든 노드가 2개 혹은 0개의 자식노드를 가지며 1개인 경우는 없다. 형태를 생각해보면 symmetry는 아니지만 어쨌든 그냥 이진트리보다 좀 안정감 있어보이는 형태다. 그리고 complete binary tree(완전 이진트리)는 이름에서 들리는 대로 완벽하게 채워진 이진트리다. 근데 유의할 점은 마지막 레벨(제일 하위레벨)은 다 차있을 필요는 없고 대신 왼쪽에서 오른쪽 방향으로는 채워져있어야 한다. 어쨌든 맨 마지막 레벨을 빼놓고 생각하면 빈 데 없이 전부 꽉 채워진 이진트리이다. 완전이진트리는 특성이 하나 있는데 노드의 개수가 n일 때 높이는 lg(n)에 비례한다. 생각해보면 당연하다 1레벨에는 루트노드 한개, 2레벨에는 2개 3레벨에는 4개 4레벨 8개 식으로 찰 테니까.. 다만 lg(n)이다 라고 단정지어서 말할 수 없는 이유는 마지막 레벨 때문이다. 얘는 다 차있을 수도, 반만 있을 수도, 한두개만 있을 수도 있으니까. 정확히 말하자면 높이 h는 lg(n)보다 작거나 같은 최대의 정수라고 생각하면 되겠다. (레벨2까지일 때 높이는 1임) 그냥 공간복잡도가 O(lg(n))이라고 하면 되겠다. 악 뭐야 또 있었다 complete보다 완벽한 perfect binary tree.... 근데 완벽 이진트리 대신 포화 이진트리라고 부르네. 얘는 마지막 레벨까지 꽉꽉 차있는 트리다. 그럼 n갯수도 정해져 있겠다 1+2, 1+2+4, 1+2+4+8 이런식으로.. 얘는 높이를 알면 노드 개수를 정확하게 구할 수 있다. 


순회
-자료구조에 저장된 모든 데이터를 도는 것. 어떤 방식이든 모든 데이터를 한번씩 출력할수만 있으면 된다. 선형 자료구조는 포문을 써서 앞에서부터 이동하면 모든데이터를 자연스럽게 다 돌게 돼서 따로 고민할 필요가 없음. 트리구조에서는 어떻게 해야할까? 선형 자료구조는 포문을 쓰는 반면 트리는 재귀구조를 사용한다. 트리순회의 기본적인 세가지 동작은 1.현재 노드의 데이터를 출력 2. 재귀적으로 왼쪽 부분트리 순회 3. 재귀적으로 오른쪽 부분트리 순회 이다. 간단하죵?이 세가지 동작을 어떤 순서로 구성하냐에 따라 여러가지 순회방식이 생긴다. - 순서에 따라 노드들의 출력순서가 달라지기 때문.

        F
     /   |
    B   G   
  /  |     |
A   D    J
   /  |   /
 C   E H

-첫번째는 pre-order 순회. 현재노드의데이터출력 - 왼쪽부분트리순회 - 오른쪽부분트리순회 의 순서를 가진다. 출력순서는 F B A D C E G J H이다.
-post-order 순회는 왼쪽부분트리순회 - 오른쪽부분트리순회 - 현재노드의데이터출력 순서를 가진다. 출력 순서는 A C E D B H J G F 이다.
-in-order 순회는 왼쪽부분트리순회 - 현재노드의데이터출력 - 오른쪽부분순회 순서를 가진다. A B C D E F G H J 순서로 출력된다.
-이처럼 순회방식에 따라 출력방식이 달라지는데, 순회를 하면 트리에도 선형적 관계가 생기므로 이를 이용할 수 있다. 




힙
-힙은 두개의 조건을 만족하는 트리다. 완전이진트리여야하고(형태속성), 모든 노드의 데이터는 자식 노드들의 데이터보다 크거나 같아야한다(힙속성)
-알고리즘 강의에서 선택정렬, 삽입정렬, merge정렬, 퀵정렬을 배웠었다. 이번에는 힙을 이용한 힙정렬을 배워보자
* 선택정렬: 다 살펴보고 제일작은거를 앞으로 - 다 살펴보고 제일작은거를 두번째 자리로
* 삽입정렬: 1번인덱스 보고 0번보다 작으면 앞으로 - 2번인덱스 확인하고 맞는자리로 - 3번인덱스 -...
* 합병정렬: divide and conquer로 계속 쪼갠뒤 컴바인할 때 양쪽 비교하면서 컴바인
* 퀵정렬: divide and conquer 방식인데 쪼갤 때 pivot으로 쪼갬. 컴바인할 때는 그냥 붙이기만 하면 됨

-힙도 완전이진트리이기 때문에 동적배열로 주로 구현한다(파이썬에서는 리스트)
-노드들을 힙속성을 만족시킬수 있는 위치로 재배치 하는 알고리즘을 heapify 라고 한다. 원리는 간단한데 노드 하나를 파라미터로 받으면 그 노드와 자식노드들의 data를 비교한다. 만약 제일 큰게 부모노드가 아니라면, 제일 큰 노드와 자식노드를 바꿔준다. 이러면 이 세 노드간의 힙속성은 만족시켰다. 유의할 점은, 바뀐 노드, 즉 원래부모노드의 데이터를 받은 자식노드를 기준으로도 힙속성을 다시 체크해줘야한다. 이 알고리즘의 최악의 경우는 root node가 비교할 때 마다 내려가서 결국 leaf node까지 내려가는 경우이다. 즉, 트리의 높이에 비례하므로 시간복잡도도 O(lg(n))이다. heapify에 파라미터로 넣어준 노드는 힙성속에 맞는 자기자리를 찾아간다. 

-리스트로 구현한다고 할 때 힙속성을 만족하면 내림차순 정렬이겠지 생각하면 안된다. 두 자식노드간의 관계는 상관없기 때문. 왼쪽자식이 오른쪽자식보다 작은 경우, 이 부분은 내림차순 정렬이 아니게 된다(힙속성임에도 불구하고) 

-힙을 만드려면 이 heapify 함수를 여러번 실행해야한다. 만약 root부터(앞 인덱스부터) 실행한다고 해보자. 왼쪽자식과 swap하게 되는 경우 왼쪽 부분트리로 내려가서 다시 heapify를 실행하지만 이 경우 오른쪽은(힙속성을 만족하든 아니든) 쳐다보지도 않게 된다. 약간 찜찜하다. 흠 그리고 2, 3, 4, 인덱스들에 대해서 히피파이를 돌릴텐테 만약 루트노드의 값이 내려와서 4번노드에 정착했다고 하자. 그러면 똑같은 값에 대해 또 돌리는 셈이 된다. 틀린건 아닌데 뭔가 좀 체계적이지 않고 주먹구구식이랄까. 그래서 히피파이는 아래(leaf 노드들), 즉 맨 끝 인덱스부터 시작한다. 밑에서부터 차곡차곡 정리해나가는거지 그러면 root까지 와서 root가 왼쪽자식과 swap 될 때 오른쪽 부분트리는 이미 딱 완성된 상태라고 짐작할 수 있다. 뭐 결국 인덱스를 전부 도는건 똑같은데 좀 더 편안한 느낌? 어쨌든 힙을 만드는데에는 heapify를 노드 개수만큼 실행해야하니까 시간복잡도는 O(n lg(n))이다.

-자 이제 힙정렬을 할거다. 난 heapify가 힙정렬인줄 알았는데 그냥 재료준비였다;_; 만들어진 요 힙을 이용해서 힙정렬을 할거다. 앞에서도 한번 얘기했지만 힙속성이 곧 내림차순으로 정리된 리스트를 말하는 것은 아니다. 왼쪽 자식이 오른쪽 자식보다 작을 경우 이 부분은 내림차순을 지키지 않게 된다. 힙 정렬을 어떻게 할거냐면 - 1. root 노드와 맨 마지막 인덱스 노드를 바꿔준다 - 2. 맨 마지막 인덱스 노드는 없는 셈친다(분명 가장 큰 값이테니까 얘는 고정) - 3. 변경된 root 노드에 대해 heapify를 진행한다.  - 4. 1을 반복한다. 즉, 고정된 노드는 없는 셈치고 남은 노드들 중 가장 마지막 인덱스의 노드와 root 노드를 바꿔준다. - 5. 이 방법을 인덱스가 끝날때까지(모든 인덱스가 고정될 때까지) 반복한다.
- 이렇게 하면 오름차순 정렬이 완성된다. 힙을 완성하는데에 드는 시간 O(n lg(n))이고 힙정렬에 드는 시간 또한 O(n lg(n))이므로 전체 시간복잡도는 여전히 O(n lg(n))이다. 만약 내림차순으로 정렬하고 싶다면 힙속성을 반대로 설정하면 된다. 부모노드가 자식노드보다 항상 작아야한다 고 설정해주고 똑같이 진행하면 내림차순 완성! 요 부분 이해가 어려울 수 있는데 애니메이션 설명이 잘 되어있어서 좋았다. 

-각 정렬들의 시간복잡도를 비교해보자 선택정렬: O(n^2), 삽입정렬: O(n^2), 합병정렬: O(n lg(n)), 퀵정렬: 평균O(n lg(n)) 최악O(n^2), 힙정렬:O(n lg(n))  


우선순위 큐
-힙은 주로 두가지 용도로 사용된다 첫번째는 지금까지 본 정렬이고 두번째는 우선순위 큐라는 추상자료형이다. 큐가 조금 변형된 개념이라고 생각하면 되는데, 먼저들어간게 먼저 나오는 방식이 아니라 데이터마다 우선순위를 가지고 있으며 나올 때는 우선순위 순서대로 나오는 방식이다. 저장순서는 상관없어진다. 이 우선순위큐는 힙(리스트)을 이용해서 구현할 수 있다 (리스트라는 추상자료형을 파이썬 리스트(동적배열)로 구현하고, 딕셔너리는 파이썬 딕셔너리로(해시테이블), 스택은 데크(연결리스트) 혹은 리스트(동적배열)로 구현할 수 있는 것처럼)

-큐를 구현하려면 우선 힙에 데이터를 추가할 수 있어야한다. 데이터를 추가할 때는 항상 마지막 인덱스로 일단 추가해준뒤 부모노드와 비교하면서 올바른 자리를 찾는 과정을 반복한다. 동적배열이므로 append는 O(1)이고 비교하면서 위치 조정해주는 건 최악의 경우 높이크기, O(lg(n))이다. 즉 힙의 삽입 연산 시간복잡도는 O(lg(n))이다.

-자 이제 추출해보자. 구현이 쉽도록 일단 큰 데이터일수록 높은 우선순위를 가진다고 치자. 즉 제일 큰애부터 차례차례 꺼내고 싶은 것. 이러면 사실상 아까 한 내림차순 힙정렬과 같다. 가장 큰 데이터는 루트노드에 있을테니 일단 루트 노드를 return하면 되겠다. 그러면서 아까 배운 동작을 실행시켜준다. 즉 맨 끝 인덱스노드와 루트노드를 스왑하고 루트노드는 리스트에서 없애면서 return, 새로운 루트노드에 대해 heapify를 실행시켜 준다. 그러면 우선순위가 가장 높은 요소를 추출하면서 남은 애들의 힙속성을 유지할 수 있다. 동적연산에서 pop은 O(1)이고 heapify는 최악의 경우 O(lg(n))이므로 힙의 추출 연산 시간 복잡도는 O(lg(n))이다.

이건 트리랑은 관계없는 얘기임
우선순위 큐는 정렬된 동적배열과 정렬된 이중연결리스트로도 구현할 수 있다. 각각의 시간 복잡도를 따져보자 (우선순위가 데이터 크기라고 할 때)
-정렬된 동적배열: 삽입의 경우 맞는 자리를 찾는데에 O(lg(n))이 걸린다(이진 탐색) 그리고 삽입하는 데에 O(n)이 걸린다 (n개의 요소를 다 밀어야 할 경우) 따라서 삽입연산의 시간복잡도는 O(n)이다. 추출하는건 맨뒤에 걸 빼면 되므로 O(1)이다. 
-정렬된 이중연결리스트: 삽입의 경우 어디에 넣을지 탐색하는 데에 O(n)이 걸린다. 중간부터 탐색하는 거 못한다.. 그리고 삽입하는 데에 O(1)이 걸린다. 삽입연산의 시간복잡도는 O(n)이다. 추출하는건 tail을 빼면 되므로 O(1)이다.

힙을 사용하면 추출은 동적배열이나 이중연결리스트보다 오래 걸리지만 데이터 삽입은 더 효율적이다. 각각의 상황에 따라 더 적절한 것을 사용하면 되겠다.



이진 탐색 트리(binary search tree)
-이진탐색트리는 힙처럼 트리의 일종이다. 트리 중 형태속성과 힙속성을 만족해야 힙이라고 할 수 있는 것처럼 이진트리도 형태속성과 이진탐색속성이 있다. 우선 형태는 이진트리면 된다. 힙보다 덜 까다롭다. 그리고 이진탐색속성은 한 노드를 기준으로 할 때 왼쪽의 부분트리에 있는 값들은 전~부 이 노드보다 작아야하고 오른쪽의 부분트리에 있는 값들은 전부 이 노드보다 커야한다. 그려보면 알겠지만 트리를 위에서 쾅 압축시켜서 한 레벨로 만들었을 때 오름차순이 되게 된다. 

            8
         /      |
      3         10
   /    |            |
 1      6           14
       /  |          /
      4   7      13
-------------------------
1   34 678  101314  -> 오름차순

- 4를 찾고싶다고 하자. root 노드에서 출발한다. 8보다 작으니 왼쪽으로 가고 3보다 크니 오른쪽으로 내려가고 6보다 작으니 왼쪽으로 내려간다. 4발견! 이런식으로 데이터를 탐색한다

-이진탐색트리는 완전이진트리가 아닐 수도 있기 때문에 파이썬 리스트(동적배열)으로 구현할 수 없다. 인덱스 계산이 child_index = parent_index * 2 ( +1) 이 성립하지 않기 때문. 노드클래스 정의후 얘네를 연결해서 구현한다. 

-이진탐색트리에 in-order 순회를 하면 언제나 오름차순으로 출력된다. 유용하게 사용할 수 있을듯!

이진탐색트리의 삽입 연산
-이진탐색속성을 유지하면서 데이터를 넣어봅시다. 루트노드에서 시작 - 왼쪽/오른쪽으로 내려감 - 판별후 왼쪽/오른쪽으로 내려감 - 이렇게 쭉 내려가면서, 만약 이 데이터가 지금 노드의 왼쪽으로 내려가야하는 상황인데 왼쪽자식이 없다? 그런 상황에 마주치면 left_child로 새로 들어온 데이터를 넣고 레퍼런스를 이어주면 된다. 여기가 이진트리속성을 만족하는 자리인 것. 시간복잡도를 따지면 당연히 높이 h에 비례할텐데 지금은 완전이진트리가 아니므로 h는 lg(n)에 비례하지 않는다. h가 가장 작으면 lg(n)이고 가장 최악의 경우는 n이겠지? 어쨌든 보통은 시간복잡도를 O(h)라고 표현하는 듯 하며 이것은 O(lg(n)) 이상 O(n) 이하의 범위이다

이진탐색트리의 탐색 연산
-특정 데이터를 가지는 노드를 return하는 연산. root node부터 비교해나간다. 찾으면 연산을 멈추고 return, 없으면(None에 도달하면) None return. 시간복잡도는 O(h)









